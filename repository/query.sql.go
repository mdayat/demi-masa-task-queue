// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type InsertUserPrayersParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
	Name   string      `json:"name"`
	Year   int16       `json:"year"`
	Month  int16       `json:"month"`
	Day    int16       `json:"day"`
}

const selectUsers = `-- name: SelectUsers :many
SELECT id, email, password, name, coordinates, city, timezone, created_at FROM "user"
`

func (q *Queries) SelectUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, selectUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Name,
			&i.Coordinates,
			&i.City,
			&i.Timezone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUncheckedPrayer = `-- name: UpdateUncheckedPrayer :exec
UPDATE prayer SET status = 'missed'
WHERE status = 'pending' AND day <= $1 AND month = $2 AND year = $3
`

type UpdateUncheckedPrayerParams struct {
	Day   int16 `json:"day"`
	Month int16 `json:"month"`
	Year  int16 `json:"year"`
}

func (q *Queries) UpdateUncheckedPrayer(ctx context.Context, arg UpdateUncheckedPrayerParams) error {
	_, err := q.db.Exec(ctx, updateUncheckedPrayer, arg.Day, arg.Month, arg.Year)
	return err
}
